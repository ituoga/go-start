// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package zz

import (
	"fmt"
	"time"

	"github.com/delaneyj/toolbelt"
	"zombiezen.com/go/sqlite"
)

type CustomerModel struct {
	Id        int64     `json:"id"`
	Uuid      string    `json:"uuid"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
	Taxid     string    `json:"taxid"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	Country   string    `json:"country"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CreateCustomerStmt struct {
	stmt *sqlite.Stmt
}

func CreateCustomer(tx *sqlite.Conn) *CreateCustomerStmt {
	stmt := tx.Prep(`
INSERT INTO customers (
        id,
        uuid,
        name,
        code,
        taxid,
        email,
        phone,
        address,
        country,
        created_at,
        updated_at
) VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
)
    `)
	return &CreateCustomerStmt{stmt: stmt}
}

func (ps *CreateCustomerStmt) Run(m *CustomerModel) error {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindInt64(1, m.Id)

	ps.stmt.BindText(2, m.Uuid)

	ps.stmt.BindText(3, m.Name)

	ps.stmt.BindText(4, m.Code)

	ps.stmt.BindText(5, m.Taxid)

	ps.stmt.BindText(6, m.Email)

	ps.stmt.BindText(7, m.Phone)

	ps.stmt.BindText(8, m.Address)

	ps.stmt.BindText(9, m.Country)

	ps.stmt.BindFloat(10, toolbelt.TimeToJulianDay(m.CreatedAt))

	ps.stmt.BindFloat(11, toolbelt.TimeToJulianDay(m.UpdatedAt))

	if _, err := ps.stmt.Step(); err != nil {
		return fmt.Errorf("failed to insert customers: %w", err)
	}

	return nil
}

func OnceCreateCustomer(tx *sqlite.Conn, m *CustomerModel) error {
	ps := CreateCustomer(tx)
	return ps.Run(m)
}

type ReadAllCustomersStmt struct {
	stmt *sqlite.Stmt
}

func ReadAllCustomers(tx *sqlite.Conn) *ReadAllCustomersStmt {
	stmt := tx.Prep(`
SELECT
        id,
        uuid,
        name,
        code,
        taxid,
        email,
        phone,
        address,
        country,
        created_at,
        updated_at
FROM customers
    `)
	return &ReadAllCustomersStmt{stmt: stmt}
}

func (ps *ReadAllCustomersStmt) Run() ([]*CustomerModel, error) {
	defer ps.stmt.Reset()

	var models []*CustomerModel
	for {
		hasRow, err := ps.stmt.Step()
		if err != nil {
			return nil, fmt.Errorf("failed to read customers: %w", err)
		} else if !hasRow {
			break
		}

		m := &CustomerModel{}

		m.Id = ps.stmt.ColumnInt64(0)

		m.Uuid = ps.stmt.ColumnText(1)

		m.Name = ps.stmt.ColumnText(2)

		m.Code = ps.stmt.ColumnText(3)

		m.Taxid = ps.stmt.ColumnText(4)

		m.Email = ps.stmt.ColumnText(5)

		m.Phone = ps.stmt.ColumnText(6)

		m.Address = ps.stmt.ColumnText(7)

		m.Country = ps.stmt.ColumnText(8)

		m.CreatedAt = toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(9))

		m.UpdatedAt = toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(10))

		models = append(models, m)
	}

	return models, nil
}

func OnceReadAllCustomers(tx *sqlite.Conn) ([]*CustomerModel, error) {
	ps := ReadAllCustomers(tx)
	return ps.Run()
}

type ReadByIDCustomerStmt struct {
	stmt *sqlite.Stmt
}

func ReadByIDCustomer(tx *sqlite.Conn) *ReadByIDCustomerStmt {
	stmt := tx.Prep(`
SELECT
        id,
        uuid,
        name,
        code,
        taxid,
        email,
        phone,
        address,
        country,
        created_at,
        updated_at
FROM customers
WHERE id = ?
    `)
	return &ReadByIDCustomerStmt{stmt: stmt}
}

func (ps *ReadByIDCustomerStmt) Run(id int64) (*CustomerModel, error) {
	defer ps.stmt.Reset()

	ps.stmt.BindInt64(1, id)

	if hasRow, err := ps.stmt.Step(); err != nil {
		return nil, fmt.Errorf("failed to read customers: %w", err)
	} else if !hasRow {
		return nil, nil
	}

	m := &CustomerModel{}

	m.Id = ps.stmt.ColumnInt64(0)

	m.Uuid = ps.stmt.ColumnText(1)

	m.Name = ps.stmt.ColumnText(2)

	m.Code = ps.stmt.ColumnText(3)

	m.Taxid = ps.stmt.ColumnText(4)

	m.Email = ps.stmt.ColumnText(5)

	m.Phone = ps.stmt.ColumnText(6)

	m.Address = ps.stmt.ColumnText(7)

	m.Country = ps.stmt.ColumnText(8)

	m.CreatedAt = toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(9))

	m.UpdatedAt = toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(10))

	return m, nil
}

func OnceReadByIDCustomer(tx *sqlite.Conn, id int64) (*CustomerModel, error) {
	ps := ReadByIDCustomer(tx)
	return ps.Run(id)
}

func CountCustomers(tx *sqlite.Conn) (int64, error) {
	stmt := tx.Prep(`
SELECT COUNT(*)
FROM customers
    `)
	defer stmt.Reset()

	if hasRow, err := stmt.Step(); err != nil {
		return 0, fmt.Errorf("failed to count customers: %w", err)
	} else if !hasRow {
		return 0, nil
	}

	return stmt.ColumnInt64(0), nil
}

func OnceCountCustomers(tx *sqlite.Conn) (int64, error) {
	return CountCustomers(tx)
}

type UpdateCustomerStmt struct {
	stmt *sqlite.Stmt
}

func UpdateCustomer(tx *sqlite.Conn) *UpdateCustomerStmt {
	stmt := tx.Prep(`
UPDATE customers
SET
        uuid = ?2,
        name = ?3,
        code = ?4,
        taxid = ?5,
        email = ?6,
        phone = ?7,
        address = ?8,
        country = ?9,
        created_at = ?10,
        updated_at = ?11
WHERE id = ?1
    `)
	return &UpdateCustomerStmt{stmt: stmt}
}

func (ps *UpdateCustomerStmt) Run(m *CustomerModel) error {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindInt64(1, m.Id)

	ps.stmt.BindText(2, m.Uuid)

	ps.stmt.BindText(3, m.Name)

	ps.stmt.BindText(4, m.Code)

	ps.stmt.BindText(5, m.Taxid)

	ps.stmt.BindText(6, m.Email)

	ps.stmt.BindText(7, m.Phone)

	ps.stmt.BindText(8, m.Address)

	ps.stmt.BindText(9, m.Country)

	ps.stmt.BindFloat(10, toolbelt.TimeToJulianDay(m.CreatedAt))

	ps.stmt.BindFloat(11, toolbelt.TimeToJulianDay(m.UpdatedAt))

	if _, err := ps.stmt.Step(); err != nil {
		return fmt.Errorf("failed to update customers: %w", err)
	}

	return nil
}

func OnceUpdateCustomer(tx *sqlite.Conn, m *CustomerModel) error {
	ps := UpdateCustomer(tx)
	return ps.Run(m)
}

type DeleteCustomerStmt struct {
	stmt *sqlite.Stmt
}

func DeleteCustomer(tx *sqlite.Conn) *DeleteCustomerStmt {
	stmt := tx.Prep(`
DELETE FROM customers
WHERE id = ?
    `)
	return &DeleteCustomerStmt{stmt: stmt}
}

func (ps *DeleteCustomerStmt) Run(id int64) error {
	defer ps.stmt.Reset()

	ps.stmt.BindInt64(1, id)

	if _, err := ps.stmt.Step(); err != nil {
		return fmt.Errorf("failed to delete customers: %w", err)
	}

	return nil
}

func OnceDeleteCustomer(tx *sqlite.Conn, id int64) error {
	ps := DeleteCustomer(tx)
	return ps.Run(id)
}
